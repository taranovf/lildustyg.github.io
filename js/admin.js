async function fetchResultsFromGitHub(token) {
    const GITHUB_USERNAME = "taranovf";
    const REPO_NAME = "test.github.io";
    const FILE_PATH = "quiz_results.json";

    const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${REPO_NAME}/contents/${FILE_PATH}`;

    try {
        console.log("üì• –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ GitHub...");

        let response = await fetch(url, {
            headers: { Authorization: `token ${token}` }
        });

        if (!response.ok) throw new Error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É!");

        let data = await response.json();
        
        // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è UTF-8 –∑ Base64
        let fileContent = decodeURIComponent(escape(atob(data.content))); 

        let results = JSON.parse(fileContent); // –ü–∞—Ä—Å–∏–º–æ JSON

        console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:", results);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        localStorage.setItem("quizResults", JSON.stringify(results));

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π SHA —Ñ–∞–π–ª—É
        localStorage.setItem("quizResultsSHA", data.sha);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        loadResults(token);

    } catch (error) {
        console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ GitHub:", error);
        localStorage.setItem("quizResults", JSON.stringify([]));
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
function loadResults(token) {
    let results = JSON.parse(localStorage.getItem("quizResults")) || [];
    let tableBody = document.getElementById("resultsTableBody");

    if (!tableBody) {
        console.error("‚ùå –¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }

    tableBody.innerHTML = "";

    results.forEach((result, index) => {
        let row = document.createElement("tr");
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>${result.name || "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"}</td>
            <td>${result.score} / 12</td>
            <td>${Math.floor(result.time / 60000)} —Ö–≤ ${Math.floor((result.time % 60000) / 1000)} —Å–µ–∫</td>
            <td>${result.date}</td>
            <td>
                <button onclick="deleteResult(${index}, '${token}')">‚ùå –í–∏–¥–∞–ª–∏—Ç–∏</button>
                <button onclick="saveResultLocally(${index})">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button>
            </td>
        `;
        tableBody.appendChild(row);
    });

    console.log("üìä –¢–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–∞!");
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑ GitHub
async function deleteResult(index, token) {
    const GITHUB_USERNAME = "taranovf";
    const REPO_NAME = "test.github.io";
    const FILE_PATH = "quiz_results.json";
    const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${REPO_NAME}/contents/${FILE_PATH}`;

    let results = JSON.parse(localStorage.getItem("quizResults")) || [];

    if (index < 0 || index >= results.length) {
        console.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
        return;
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Å
    results.splice(index, 1);

    try {
        // üî• –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π SHA –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        let shaResponse = await fetch(url, {
            headers: { Authorization: `token ${token}` }
        });

        if (!shaResponse.ok) throw new Error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂–∏–π SHA!");

        let shaData = await shaResponse.json();
        let sha = shaData.sha;

        let jsonString = JSON.stringify(results, null, 2);
        let encodedContent = btoa(unescape(encodeURIComponent(jsonString))); 

        let response = await fetch(url, {
            method: "PUT",
            headers: {
                Authorization: `token ${token}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                message: "üóë –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
                content: encodedContent,
                sha: sha
            })
        });

        if (response.ok) {
            console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!");
            localStorage.setItem("quizResults", JSON.stringify(results));
            loadResults(token); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        } else {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", await response.json());
        }
    } catch (error) {
        console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å:", error);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —É —Ñ–∞–π–ª
function saveResultLocally(index) {
    let results = JSON.parse(localStorage.getItem("quizResults")) || [];
    let result = results[index];

    if (!result) return;

    let blob = new Blob([JSON.stringify(result, null, 2)], { type: "application/json" });
    let link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `quiz_result_${index + 1}.json`;
    link.click();
}
// –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
// const NEW_TOKEN = prompt("–í–≤–µ–¥—ñ—Ç—å GitHub —Ç–æ–∫–µ–Ω:");
const part1 = "ghp";
const part2 = "_dHc1YxpNA";
const part3 = "MhCGvzN8L02";
const part4 = "mun5JCDNJr3FtfCg";
const token = part1 + part2 + part3 + part4;
fetchResultsFromGitHub(token);
